// Generated by ts-to-zod
import { z } from "zod";

export const GET_INBOXESQuery = z.object({
  __typename: z.literal("query_root").optional(),
  total: z.object({
    __typename: z.literal("inboxes_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("inboxes_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  payload: z.array(
    z.object({
      __typename: z.literal("inboxes").optional(),
      id: z.number(),
      name: z.string(),
      channel_type: z.string(),
      channel_id: z.number(),
      channel: z.any().optional().nullable(),
      description: z.string().optional().nullable(),
      is_enabled: z.boolean(),
      created_at: z.string(),
      updated_at: z.string(),
      reply_channel_id: z.number().optional().nullable(),
      total_conversations: z.object({
        __typename: z.literal("conversations_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("conversations_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
    })
  ),
});

export const GET_INBOXES_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("inboxes").optional(),
      id: z.number(),
      name: z.string(),
      reply_channel_id: z.number().optional().nullable(),
      channel_type: z.string(),
      channel: z.any().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_INBOXES_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("inboxes").optional(),
      name: z.string(),
      is_enabled: z.boolean(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_EMAIL_INBOX_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  updated_inbox: z
    .object({
      __typename: z.literal("inboxes").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      is_enabled: z.boolean(),
    })
    .optional()
    .nullable(),
  updated_channel: z
    .object({
      __typename: z.literal("channel_email").optional(),
      id: z.number(),
      imap_enabled: z.boolean(),
      imap_username: z.string().optional().nullable(),
      imap_host_address: z.string().optional().nullable(),
      imap_port: z.number().optional().nullable(),
      smtp_enabled: z.boolean(),
      smtp_username: z.string().optional().nullable(),
      smtp_host_address: z.string().optional().nullable(),
      smtp_port: z.number().optional().nullable(),
      smtp_requires_ssl: z.boolean(),
      updated_at: z.string().optional().nullable(),
      smtp_email: z.string().optional().nullable(),
      imap_password: z.string().optional().nullable(),
      smtp_password: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_WHATSAPP_INBOX_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  updated_inbox: z
    .object({
      __typename: z.literal("inboxes").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      is_enabled: z.boolean(),
    })
    .optional()
    .nullable(),
  updated_channel: z
    .object({
      __typename: z.literal("channel_whatsapp").optional(),
      id: z.number(),
      phone_number: z.string(),
      phone_number_id: z.string(),
      business_account_id: z.string(),
      access_token: z.string(),
    })
    .optional()
    .nullable(),
});

export const DELETE_INBOX_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("inboxes").optional(),
      id: z.number(),
      name: z.string(),
      channel_type: z.string(),
      channel_id: z.number(),
    })
    .optional()
    .nullable(),
});

export const GET_CONVERSATION_LISTQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("conversations").optional(),
      id: z.number(),
      inbox_id: z.number().optional().nullable(),
      contact_id: z.number().optional().nullable(),
      status: z.number(),
      snoozed_until: z.string().optional().nullable(),
      created_at: z.string(),
      conversation_type: z.string(),
      contact: z
        .object({
          __typename: z.literal("contacts").optional(),
          id: z.number(),
          name: z.string().optional().nullable(),
          email: z.string().optional().nullable(),
          phone_number: z.string().optional().nullable(),
          source: z.any().optional().nullable(),
          created_at: z.string(),
          updated_at: z.string(),
          profile_image: z.any().optional().nullable(),
        })
        .optional()
        .nullable(),
      inbox: z
        .object({
          __typename: z.literal("inboxes").optional(),
          name: z.string(),
          channel_type: z.string(),
          channel: z.any().optional().nullable(),
        })
        .optional()
        .nullable(),
      unread_messages: z.object({
        __typename: z.literal("messages_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("messages_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      incoming: z.object({
        __typename: z.literal("messages_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("messages_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      outgoing: z.object({
        __typename: z.literal("messages_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("messages_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      messages: z.array(
        z.object({
          __typename: z.literal("messages").optional(),
          id: z.number(),
          message: z.string().optional().nullable(),
          message_type: z.number(),
          conversation_id: z.number(),
          created_at: z.string(),
          internal: z.boolean(),
          content_attributes: z.any().optional().nullable(),
          approved_at: z.string().optional().nullable(),
          source_id: z.string().optional().nullable(),
          sender_id: z.number().optional().nullable(),
          sender_info: z.any().optional().nullable(),
          conversation: z.object({
            __typename: z.literal("conversations").optional(),
            inbox: z
              .object({
                __typename: z.literal("inboxes").optional(),
                channel: z.any().optional().nullable(),
              })
              .optional()
              .nullable(),
          }),
          attachments: z.array(
            z.object({
              __typename: z.literal("attachments").optional(),
              id: z.number(),
              key: z.string().optional().nullable(),
              file_name: z.string().optional().nullable(),
              file_type: z.string().optional().nullable(),
              extension: z.string().optional().nullable(),
              url: z.string().optional().nullable(),
            })
          ),
        })
      ),
    })
  ),
});

export const GET_CONVERSATION_COUNTSQuery = z.object({
  __typename: z.literal("query_root").optional(),
  mine: z.object({
    __typename: z.literal("conversations_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("conversations_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  pending: z.object({
    __typename: z.literal("conversations_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("conversations_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  watching: z.object({
    __typename: z.literal("conversations_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("conversations_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  history: z.object({
    __typename: z.literal("conversations_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("conversations_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  unassigned: z.object({
    __typename: z.literal("conversations_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("conversations_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
});

export const GET_SUBSCRIPTION_CONVERSATION_COUNTSubscription = z.object({
  __typename: z.literal("subscription_root").optional(),
  payload: z.object({
    __typename: z.literal("conversations_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("conversations_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
});

export const GET_CONVERSATIONS_SUBSCRIPTIONSubscription = z.object({
  __typename: z.literal("subscription_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("conversations").optional(),
      id: z.number(),
    })
  ),
});

export const GET_CONVERSATION_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("conversations").optional(),
      id: z.number(),
      inbox_id: z.number().optional().nullable(),
      contact_id: z.number().optional().nullable(),
      status: z.number(),
      snoozed_until: z.string().optional().nullable(),
      created_at: z.string(),
      closing_contact_reason_value: z.any().optional().nullable(),
      additional_attributes: z.any().optional().nullable(),
      conversation_type: z.string(),
      contact: z
        .object({
          __typename: z.literal("contacts").optional(),
          id: z.number(),
          name: z.string().optional().nullable(),
          email: z.string().optional().nullable(),
          phone_number: z.string().optional().nullable(),
          preferred_language: z.string(),
          source: z.any().optional().nullable(),
          created_at: z.string(),
          updated_at: z.string(),
          profile_image: z.any().optional().nullable(),
        })
        .optional()
        .nullable(),
      agent: z
        .object({
          __typename: z.literal("users").optional(),
          id: z.number(),
          name: z.string(),
          display_name: z.string().optional().nullable(),
          email: z.any().optional().nullable(),
        })
        .optional()
        .nullable(),
      inbox: z
        .object({
          __typename: z.literal("inboxes").optional(),
          name: z.string(),
          channel: z.any().optional().nullable(),
          reply_channel: z
            .object({
              __typename: z.literal("channel_twitter_profiles").optional(),
              id: z.number(),
              screen_name: z.string(),
            })
            .optional()
            .nullable(),
          team_inboxes: z.array(
            z.object({
              __typename: z.literal("team_inboxes").optional(),
              team: z.object({
                __typename: z.literal("teams").optional(),
                id: z.number(),
                name: z.string(),
              }),
            })
          ),
        })
        .optional()
        .nullable(),
      conversation_tags: z.array(
        z.object({
          __typename: z.literal("conversation_tags").optional(),
          tag: z.object({
            __typename: z.literal("tags").optional(),
            id: z.number(),
            name: z.string(),
            color: z.string().optional().nullable(),
          }),
        })
      ),
      assigned_team_member: z
        .object({
          __typename: z.literal("team_members").optional(),
          team: z.object({
            __typename: z.literal("teams").optional(),
            id: z.number(),
            name: z.string(),
          }),
          user: z.object({
            __typename: z.literal("users").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
        .optional()
        .nullable(),
    })
    .optional()
    .nullable(),
});

export const GET_FILTERED_CONVERSATIONQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("conversations").optional(),
      id: z.number(),
      inbox_id: z.number().optional().nullable(),
      contact_id: z.number().optional().nullable(),
      status: z.number(),
      snoozed_until: z.string().optional().nullable(),
      created_at: z.string(),
      conversation_type: z.string(),
      contact: z
        .object({
          __typename: z.literal("contacts").optional(),
          id: z.number(),
          name: z.string().optional().nullable(),
          email: z.string().optional().nullable(),
          phone_number: z.string().optional().nullable(),
          source: z.any().optional().nullable(),
          created_at: z.string(),
          updated_at: z.string(),
          profile_image: z.any().optional().nullable(),
        })
        .optional()
        .nullable(),
      inbox: z
        .object({
          __typename: z.literal("inboxes").optional(),
          name: z.string(),
          channel_type: z.string(),
        })
        .optional()
        .nullable(),
      unread_messages: z.object({
        __typename: z.literal("messages_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("messages_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      incoming: z.object({
        __typename: z.literal("messages_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("messages_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      outgoing: z.object({
        __typename: z.literal("messages_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("messages_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      messages: z.array(
        z.object({
          __typename: z.literal("messages").optional(),
          id: z.number(),
          message: z.string().optional().nullable(),
          message_type: z.number(),
          conversation_id: z.number(),
          created_at: z.string(),
          internal: z.boolean(),
          content_attributes: z.any().optional().nullable(),
          approved_at: z.string().optional().nullable(),
          source_id: z.string().optional().nullable(),
          sender_id: z.number().optional().nullable(),
          sender_info: z.any().optional().nullable(),
          conversation: z.object({
            __typename: z.literal("conversations").optional(),
            inbox: z
              .object({
                __typename: z.literal("inboxes").optional(),
                channel: z.any().optional().nullable(),
              })
              .optional()
              .nullable(),
          }),
          attachments: z.array(
            z.object({
              __typename: z.literal("attachments").optional(),
              id: z.number(),
              key: z.string().optional().nullable(),
              file_name: z.string().optional().nullable(),
              file_type: z.string().optional().nullable(),
              extension: z.string().optional().nullable(),
              url: z.string().optional().nullable(),
            })
          ),
        })
      ),
    })
  ),
});

export const GET_CONVERSATION_BY_CONTACT_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("conversations").optional(),
      id: z.number(),
      inbox_id: z.number().optional().nullable(),
      contact_id: z.number().optional().nullable(),
      status: z.number(),
      snoozed_until: z.string().optional().nullable(),
      created_at: z.string(),
      conversation_type: z.string(),
      contact: z
        .object({
          __typename: z.literal("contacts").optional(),
          id: z.number(),
          name: z.string().optional().nullable(),
          email: z.string().optional().nullable(),
          phone_number: z.string().optional().nullable(),
          source: z.any().optional().nullable(),
          created_at: z.string(),
          updated_at: z.string(),
          profile_image: z.any().optional().nullable(),
        })
        .optional()
        .nullable(),
      inbox: z
        .object({
          __typename: z.literal("inboxes").optional(),
          name: z.string(),
          channel_type: z.string(),
          channel: z.any().optional().nullable(),
        })
        .optional()
        .nullable(),
      unread_messages: z.object({
        __typename: z.literal("messages_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("messages_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      incoming: z.object({
        __typename: z.literal("messages_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("messages_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      outgoing: z.object({
        __typename: z.literal("messages_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("messages_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      messages: z.array(
        z.object({
          __typename: z.literal("messages").optional(),
          id: z.number(),
          message: z.string().optional().nullable(),
          message_type: z.number(),
          conversation_id: z.number(),
          created_at: z.string(),
          internal: z.boolean(),
          content_attributes: z.any().optional().nullable(),
          approved_at: z.string().optional().nullable(),
          source_id: z.string().optional().nullable(),
          sender_id: z.number().optional().nullable(),
          sender_info: z.any().optional().nullable(),
          attachments: z.array(
            z.object({
              __typename: z.literal("attachments").optional(),
              id: z.number(),
              key: z.string().optional().nullable(),
              file_name: z.string().optional().nullable(),
              file_type: z.string().optional().nullable(),
              extension: z.string().optional().nullable(),
              url: z.string().optional().nullable(),
            })
          ),
        })
      ),
      account: z.object({
        __typename: z.literal("accounts").optional(),
        name: z.string(),
      }),
      conversation_tags: z.array(
        z.object({
          __typename: z.literal("conversation_tags").optional(),
          tag: z.object({
            __typename: z.literal("tags").optional(),
            id: z.number(),
            name: z.string(),
            color: z.string().optional().nullable(),
          }),
        })
      ),
      agent: z
        .object({
          __typename: z.literal("users").optional(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      assigned_team_member: z
        .object({
          __typename: z.literal("team_members").optional(),
          user: z.object({
            __typename: z.literal("users").optional(),
            name: z.string(),
            id: z.number(),
          }),
        })
        .optional()
        .nullable(),
    })
  ),
});

export const GET_CUSTOM_FILTERSQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("custom_filters").optional(),
      id: z.number(),
      name: z.string(),
      query: z.any(),
      filter_type: z.number(),
    })
  ),
});

export const GET_CUSTOM_FILTER_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("custom_filters").optional(),
      id: z.number(),
      name: z.string(),
      query: z.any(),
      filter_type: z.number(),
    })
    .optional()
    .nullable(),
});

export const CREATE_CUSTOM_FILTERMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("custom_filters").optional(),
      id: z.number(),
      name: z.string(),
      query: z.any(),
      filter_type: z.number(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_CUSTOM_FILTER_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("custom_filters").optional(),
      id: z.number(),
      name: z.string(),
      query: z.any(),
      filter_type: z.number(),
    })
    .optional()
    .nullable(),
});

export const DELETE_CUSTOM_FILTER_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("custom_filters").optional(),
      id: z.number(),
      name: z.string(),
    })
    .optional()
    .nullable(),
});

export const GET_MESSAGESQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("messages").optional(),
      id: z.number(),
      message: z.string().optional().nullable(),
      message_type: z.number(),
      conversation_id: z.number(),
      created_at: z.string(),
      internal: z.boolean(),
      content_attributes: z.any().optional().nullable(),
      approved_at: z.string().optional().nullable(),
      source_id: z.string().optional().nullable(),
      sender_id: z.number().optional().nullable(),
      sender_info: z.any().optional().nullable(),
      attachments: z.array(
        z.object({
          __typename: z.literal("attachments").optional(),
          id: z.number(),
          key: z.string().optional().nullable(),
          file_name: z.string().optional().nullable(),
          file_type: z.string().optional().nullable(),
          extension: z.string().optional().nullable(),
          url: z.string().optional().nullable(),
        })
      ),
      reply_of_message: z
        .object({
          __typename: z.literal("messages").optional(),
          id: z.number(),
          message: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      conversation: z.object({
        __typename: z.literal("conversations").optional(),
        type: z.string(),
        inbox: z
          .object({
            __typename: z.literal("inboxes").optional(),
            name: z.string(),
            channel_type: z.string(),
            channel: z.any().optional().nullable(),
          })
          .optional()
          .nullable(),
        contact: z
          .object({
            __typename: z.literal("contacts").optional(),
            id: z.number(),
            name: z.string().optional().nullable(),
            email: z.string().optional().nullable(),
            phone_number: z.string().optional().nullable(),
            source: z.any().optional().nullable(),
            created_at: z.string(),
            updated_at: z.string(),
            profile_image: z.any().optional().nullable(),
          })
          .optional()
          .nullable(),
      }),
    })
  ),
});

export const GET_MESSAGES_SUBSCRIPTIONSubscription = z.object({
  __typename: z.literal("subscription_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("messages").optional(),
      id: z.number(),
    })
  ),
});

export const GET_MESSAGES_COUNT_BY_CONVERSATION_IDSubscription = z.object({
  __typename: z.literal("subscription_root").optional(),
  payload: z.object({
    __typename: z.literal("messages_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("messages_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
});

export const READ_MESSAGESMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("messages_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("messages").optional(),
          id: z.number(),
          message: z.string().optional().nullable(),
          message_type: z.number(),
          conversation_id: z.number(),
          created_at: z.string(),
          internal: z.boolean(),
          content_attributes: z.any().optional().nullable(),
          approved_at: z.string().optional().nullable(),
          source_id: z.string().optional().nullable(),
          sender_id: z.number().optional().nullable(),
          sender_info: z.any().optional().nullable(),
          attachments: z.array(
            z.object({
              __typename: z.literal("attachments").optional(),
              id: z.number(),
              key: z.string().optional().nullable(),
              file_name: z.string().optional().nullable(),
              file_type: z.string().optional().nullable(),
              extension: z.string().optional().nullable(),
              url: z.string().optional().nullable(),
            })
          ),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const GET_AGENT_LISTQuery = z.object({
  __typename: z.literal("query_root").optional(),
  total: z.object({
    __typename: z.literal("account_agents_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("account_agents_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  payload: z.array(
    z.object({
      __typename: z.literal("account_agents").optional(),
      id: z.number().optional().nullable(),
      name: z.string().optional().nullable(),
      phone_number: z.string().optional().nullable(),
      email: z.any().optional().nullable(),
      avatar_url: z.string().optional().nullable(),
      role: z.string().optional().nullable(),
      is_enabled: z.boolean().optional().nullable(),
      verified: z.boolean().optional().nullable(),
      team_list: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          user_id: z.number(),
          team: z.object({
            __typename: z.literal("teams").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
      ),
    })
  ),
});

export const GET_AGENT_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("account_agents").optional(),
      id: z.number().optional().nullable(),
      name: z.string().optional().nullable(),
      role: z.string().optional().nullable(),
      email: z.any().optional().nullable(),
      phone_number: z.string().optional().nullable(),
      verified: z.boolean().optional().nullable(),
      invited_by: z
        .object({
          __typename: z.literal("account_agents").optional(),
          id: z.number().optional().nullable(),
          name: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      team_members: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          team: z.object({
            __typename: z.literal("teams").optional(),
            id: z.number(),
            name: z.string(),
            is_enabled: z.boolean(),
          }),
        })
      ),
    })
  ),
});

export const UPDATE_AGENTMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  account_users: z
    .object({
      __typename: z.literal("account_users_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("account_users").optional(),
          id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
  user: z
    .object({
      __typename: z.literal("users").optional(),
      id: z.number(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_AGENT_STATUSMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("account_users_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("account_users").optional(),
          user_id: z.number(),
          is_enabled: z.boolean(),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const DELETE_AGENT_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("account_users_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("account_users").optional(),
          id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const GET_TEAMSQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("teams").optional(),
      id: z.number(),
      name: z.string(),
      type: z.string().optional().nullable(),
      description: z.string().optional().nullable(),
      is_enabled: z.boolean(),
      team_members: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          id: z.number(),
          auto_assign_enabled: z.boolean(),
          approval_enabled: z.boolean(),
          max_conversation_queue: z.number(),
          user: z.object({
            __typename: z.literal("users").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
      ),
      team_inboxes: z.array(
        z.object({
          __typename: z.literal("team_inboxes").optional(),
          id: z.number(),
          inbox: z.object({
            __typename: z.literal("inboxes").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
      ),
    })
  ),
  total: z.object({
    __typename: z.literal("teams_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("teams_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
});

export const GET_TEAM_BY_MEMBER_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("teams").optional(),
      id: z.number(),
      name: z.string(),
      is_enabled: z.boolean(),
      allow_auto_assign: z.boolean().optional().nullable(),
    })
  ),
});

export const GET_TEAM_BY_USER_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("teams").optional(),
      id: z.number(),
      name: z.string(),
    })
  ),
});

export const CREATE_TEAMMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("teams").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      is_enabled: z.boolean(),
      type: z.string().optional().nullable(),
      team_members: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          id: z.number(),
          auto_assign_enabled: z.boolean(),
          approval_enabled: z.boolean(),
          max_conversation_queue: z.number(),
          user: z.object({
            __typename: z.literal("users").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
      ),
      team_inboxes: z.array(
        z.object({
          __typename: z.literal("team_inboxes").optional(),
          id: z.number(),
          inbox: z.object({
            __typename: z.literal("inboxes").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const DELETE_TEAMMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("teams").optional(),
      id: z.number(),
      name: z.string(),
      type: z.string().optional().nullable(),
      description: z.string().optional().nullable(),
      is_enabled: z.boolean(),
      team_members: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          id: z.number(),
          user: z.object({
            __typename: z.literal("users").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
      ),
      team_inboxes: z.array(
        z.object({
          __typename: z.literal("team_inboxes").optional(),
          id: z.number(),
          inbox: z.object({
            __typename: z.literal("inboxes").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const UPDATE_TEAM_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  deleted_team_members: z
    .object({
      __typename: z.literal("team_members_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          team_id: z.number(),
          user_id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
  inserted_team_members: z
    .object({
      __typename: z.literal("team_members_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          team_id: z.number(),
          user_id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
  deleted_team_inboxes: z
    .object({
      __typename: z.literal("team_inboxes_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("team_inboxes").optional(),
          team_id: z.number(),
          inbox_id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
  inserted_team_inboxes: z
    .object({
      __typename: z.literal("team_inboxes_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("team_inboxes").optional(),
          team_id: z.number(),
          inbox_id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
  updated_team: z
    .object({
      __typename: z.literal("teams").optional(),
      id: z.number(),
      name: z.string(),
      type: z.string().optional().nullable(),
      is_enabled: z.boolean(),
      team_members: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          team_id: z.number(),
          user_id: z.number(),
          approval_enabled: z.boolean(),
          auto_assign_enabled: z.boolean(),
          max_conversation_queue: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const GET_TEAM_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("teams").optional(),
      id: z.number(),
      name: z.string(),
      type: z.string().optional().nullable(),
      description: z.string().optional().nullable(),
      is_enabled: z.boolean(),
      allow_auto_assign: z.boolean().optional().nullable(),
      team_members: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          auto_assign_enabled: z.boolean(),
          approval_enabled: z.boolean(),
          max_conversation_queue: z.number(),
          user: z.object({
            __typename: z.literal("users").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
      ),
      team_inboxes: z.array(
        z.object({
          __typename: z.literal("team_inboxes").optional(),
          inbox: z.object({
            __typename: z.literal("inboxes").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const ADD_TEAM_MEMBERSMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("team_members_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          id: z.number(),
          team_id: z.number(),
          user_id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const DELETE_TEAM_MEMBERMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("team_members_mutation_response").optional(),
      affected_rows: z.number(),
      returning: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const GET_TEAM_MEMBERS_BY_TEAM_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("team_members").optional(),
      agent: z.object({
        __typename: z.literal("users").optional(),
        id: z.number(),
        name: z.string(),
        display_name: z.string().optional().nullable(),
        email: z.any().optional().nullable(),
      }),
    })
  ),
});

export const GET_TEAM_MEMBERS_BY_INBOX_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("teams").optional(),
      id: z.number(),
      name: z.string(),
      team_members: z.array(
        z.object({
          __typename: z.literal("team_members").optional(),
          team_id: z.number(),
          user_id: z.number(),
          max_conversation_queue: z.number(),
          user: z.object({
            __typename: z.literal("users").optional(),
            name: z.string(),
            account_users: z.array(
              z.object({
                __typename: z.literal("account_users").optional(),
                availability: z.number(),
              })
            ),
          }),
          total_conversations: z.object({
            __typename: z.literal("conversations_aggregate").optional(),
            aggregate: z
              .object({
                __typename: z.literal("conversations_aggregate_fields").optional(),
                count: z.number(),
              })
              .optional()
              .nullable(),
          }),
        })
      ),
    })
  ),
});

export const ASSIGN_TEAM_TO_INBOXMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("team_inboxes_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("team_inboxes").optional(),
          id: z.number(),
          team_id: z.number(),
          inbox_id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const ASSIGN_AGENT_TO_CONVERSATIONMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("conversations").optional(),
      id: z.number(),
      assigned_team_member: z
        .object({
          __typename: z.literal("team_members").optional(),
          team: z.object({
            __typename: z.literal("teams").optional(),
            id: z.number(),
            name: z.string(),
          }),
          user: z.object({
            __typename: z.literal("users").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
        .optional()
        .nullable(),
    })
    .optional()
    .nullable(),
});

export const GET_ALL_CANNED_RESPONSESQuery = z.object({
  __typename: z.literal("query_root").optional(),
  total: z.object({
    __typename: z.literal("canned_responses_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("canned_responses_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  payload: z.array(
    z.object({
      __typename: z.literal("canned_responses").optional(),
      id: z.number(),
      short_code: z.string(),
      content: z.string().optional().nullable(),
      content_html: z.string().optional().nullable(),
      use_count: z.number(),
      is_enabled: z.boolean(),
      created_at: z.string(),
      updated_at: z.string(),
      category: z
        .object({
          __typename: z.literal("canned_responses_category").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      created_by: z
        .object({
          __typename: z.literal("account_agents").optional(),
          name: z.string().optional().nullable(),
          id: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
    })
  ),
});

export const DELETE_CANNED_RESPONSES_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("canned_responses").optional(),
      id: z.number(),
    })
    .optional()
    .nullable(),
});

export const CREATE_CANNED_RESPONSESMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("canned_responses").optional(),
      id: z.number(),
      short_code: z.string(),
      content: z.string().optional().nullable(),
      use_count: z.number(),
      is_enabled: z.boolean(),
      created_at: z.string(),
      updated_at: z.string(),
      category: z
        .object({
          __typename: z.literal("canned_responses_category").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
    })
    .optional()
    .nullable(),
});

export const UPDATED_CANNED_RESPONSES_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("canned_responses").optional(),
      id: z.number(),
      short_code: z.string(),
      content: z.string().optional().nullable(),
      content_html: z.string().optional().nullable(),
      is_enabled: z.boolean(),
      updated_at: z.string(),
    })
    .optional()
    .nullable(),
});

export const GET_All_CANNED_RESPONSE_CATEGORIESQuery = z.object({
  __typename: z.literal("query_root").optional(),
  total: z.object({
    __typename: z.literal("canned_responses_category_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("canned_responses_category_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  payload: z.array(
    z.object({
      __typename: z.literal("canned_responses_category").optional(),
      id: z.number(),
      name: z.string(),
      language: z.string(),
      is_enabled: z.boolean(),
      created_at: z.string(),
      updated_at: z.string(),
      created_by: z
        .object({
          __typename: z.literal("account_agents").optional(),
          name: z.string().optional().nullable(),
          id: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
    })
  ),
});

export const CREATE_CANNED_CATEGORYMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("canned_responses_category").optional(),
      id: z.number(),
      language: z.string(),
      name: z.string(),
      is_enabled: z.boolean(),
      created_at: z.string(),
      updated_at: z.string(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_CANNED_CATEGORY_by_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("canned_responses_category").optional(),
      id: z.number(),
      name: z.string(),
      is_enabled: z.boolean(),
      updated_at: z.string(),
    })
    .optional()
    .nullable(),
});

export const DELETE_CANNED_CATEGORY_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("canned_responses_category").optional(),
      id: z.number(),
    })
    .optional()
    .nullable(),
});

export const DELETE_CONTACTSMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("contacts").optional(),
      id: z.number(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone_number: z.string().optional().nullable(),
      source: z.any().optional().nullable(),
      created_at: z.string(),
      updated_at: z.string(),
      profile_image: z.any().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_CONTACTMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("contacts").optional(),
      id: z.number(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone_number: z.string().optional().nullable(),
      source: z.any().optional().nullable(),
      created_at: z.string(),
      updated_at: z.string(),
      city: z.string().optional().nullable(),
      gender: z.string().optional().nullable(),
      preferred_language: z.string(),
      social_profiles: z.any().optional().nullable(),
      profile_image: z.any().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_CONVERSATION_STATUSMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("conversations").optional(),
      id: z.number(),
      status: z.number(),
      closing_contact_reason_value: z.any().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const DELETE_CONVERSATION_TAG_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("conversation_tags_mutation_response").optional(),
      affected_rows: z.number(),
    })
    .optional()
    .nullable(),
});

export const SEND_NOTE_WITH_CONVERSATION_CLOSEMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("messages").optional(),
      message: z.string().optional().nullable(),
      message_type: z.number(),
      conversation: z.object({
        __typename: z.literal("conversations").optional(),
        id: z.number(),
      }),
    })
    .optional()
    .nullable(),
});

export const ADD_TAG_TO_CONVERSATIONMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("conversation_tags").optional(),
      tag: z.object({
        __typename: z.literal("tags").optional(),
        name: z.string(),
      }),
    })
    .optional()
    .nullable(),
});

export const FILTER_CONTACT_LISTQuery = z.object({
  __typename: z.literal("query_root").optional(),
  counts: z.object({
    __typename: z.literal("contacts_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("contacts_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  payload: z.array(
    z.object({
      __typename: z.literal("contacts").optional(),
      id: z.number(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone_number: z.string().optional().nullable(),
      source: z.any().optional().nullable(),
      created_at: z.string(),
      updated_at: z.string(),
      account_id: z.number().optional().nullable(),
      last_activity_at: z.string().optional().nullable(),
      social_profiles: z.any().optional().nullable(),
      profile_image: z.any().optional().nullable(),
      total_conversations: z.object({
        __typename: z.literal("conversations_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("conversations_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      total_tickets: z.object({
        __typename: z.literal("ticket_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("ticket_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      total_csats: z.object({
        __typename: z.literal("csat_feedback_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("csat_feedback_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
    })
  ),
});

export const GET_CONTACT_COUNTQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.object({
    __typename: z.literal("contacts_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("contacts_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
});

export const REPORT_CONVERSATION_COUNTSQuery = z.object({
  __typename: z.literal("query_root").optional(),
  total: z.object({
    __typename: z.literal("conversations_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("conversations_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  open: z.object({
    __typename: z.literal("conversations_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("conversations_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  assigned: z.object({
    __typename: z.literal("conversations_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("conversations_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  unassigned: z.object({
    __typename: z.literal("conversations_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("conversations_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  closed: z.object({
    __typename: z.literal("conversations_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("conversations_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
});

export const GET_AUTOMATION_RULESQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("automation_rules").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      event_name: z.string(),
      conditions: z.any(),
      actions: z.any(),
      active: z.boolean(),
      created_at: z.string(),
    })
  ),
});

export const CREATE_AUTOMATION_RULESMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("automation_rules").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      event_name: z.string(),
      conditions: z.any(),
      actions: z.any(),
      active: z.boolean(),
      created_at: z.string(),
    })
    .optional()
    .nullable(),
});

export const UPDATED_AUTOMATION_RULESMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("automation_rules").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      event_name: z.string(),
      conditions: z.any(),
      actions: z.any(),
      active: z.boolean(),
      created_at: z.string(),
    })
    .optional()
    .nullable(),
});

export const DELETE_AUTOMATION_RULESMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("automation_rules").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      event_name: z.string(),
      conditions: z.any(),
      actions: z.any(),
      active: z.boolean(),
      created_at: z.string(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_USER_STATUSMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("account_users_mutation_response").optional(),
      affected_rows: z.number(),
      returning: z.array(
        z.object({
          __typename: z.literal("account_users").optional(),
          user_id: z.number(),
          availability: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const GET_USER_STATUSQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("account_agents").optional(),
      id: z.number().optional().nullable(),
      availability: z.number().optional().nullable(),
    })
  ),
});

export const GET_CONTACT_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("contacts").optional(),
      id: z.number(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      gender: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      profile_twitter: z.any().optional().nullable(),
      profile_instagram: z.any(),
      preferred_language: z.string(),
      phone_number: z.string().optional().nullable(),
      source: z.any().optional().nullable(),
      created_at: z.string(),
      updated_at: z.string(),
      last_activity_at: z.string().optional().nullable(),
      profile_image: z.any().optional().nullable(),
      conversations: z.array(
        z.object({
          __typename: z.literal("conversations").optional(),
          id: z.number(),
          status: z.number(),
          created_at: z.string(),
          account: z.object({
            __typename: z.literal("accounts").optional(),
            name: z.string(),
          }),
          incoming: z.object({
            __typename: z.literal("messages_aggregate").optional(),
            aggregate: z
              .object({
                __typename: z.literal("messages_aggregate_fields").optional(),
                count: z.number(),
              })
              .optional()
              .nullable(),
          }),
          outgoing: z.object({
            __typename: z.literal("messages_aggregate").optional(),
            aggregate: z
              .object({
                __typename: z.literal("messages_aggregate_fields").optional(),
                count: z.number(),
              })
              .optional()
              .nullable(),
          }),
          conversation_tags: z.array(
            z.object({
              __typename: z.literal("conversation_tags").optional(),
              tag: z.object({
                __typename: z.literal("tags").optional(),
                name: z.string(),
              }),
            })
          ),
          agent: z
            .object({
              __typename: z.literal("users").optional(),
              name: z.string(),
            })
            .optional()
            .nullable(),
          inbox: z
            .object({
              __typename: z.literal("inboxes").optional(),
              channel_type: z.string(),
            })
            .optional()
            .nullable(),
        })
      ),
      contact_tags: z.array(
        z.object({
          __typename: z.literal("contact_tags").optional(),
          tag: z.object({
            __typename: z.literal("tags").optional(),
            id: z.number(),
            color: z.string().optional().nullable(),
            name: z.string(),
          }),
        })
      ),
      total_conversations: z.object({
        __typename: z.literal("conversations_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("conversations_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      total_tickets: z.object({
        __typename: z.literal("ticket_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("ticket_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      total_csats: z.object({
        __typename: z.literal("csat_feedback_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("csat_feedback_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
    })
    .optional()
    .nullable(),
});

export const GET_CONTACT_BY_PHONE_NUMBERQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("contacts").optional(),
      id: z.number(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone_number: z.string().optional().nullable(),
      source: z.any().optional().nullable(),
      created_at: z.string(),
      updated_at: z.string(),
      account_id: z.number().optional().nullable(),
      last_activity_at: z.string().optional().nullable(),
      social_profiles: z.any().optional().nullable(),
      profile_image: z.any().optional().nullable(),
      total_conversations: z.object({
        __typename: z.literal("conversations_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("conversations_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      total_tickets: z.object({
        __typename: z.literal("ticket_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("ticket_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
      total_csats: z.object({
        __typename: z.literal("csat_feedback_aggregate").optional(),
        aggregate: z
          .object({
            __typename: z.literal("csat_feedback_aggregate_fields").optional(),
            count: z.number(),
          })
          .optional()
          .nullable(),
      }),
    })
  ),
});

export const TICKET_CONTACTSQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("contacts").optional(),
      id: z.number(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone_number: z.string().optional().nullable(),
      source: z.any().optional().nullable(),
      created_at: z.string(),
      updated_at: z.string(),
      profile_image: z.any().optional().nullable(),
    })
  ),
});

export const GET_TICKET_FORM_LISTQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("ticket_forms").optional(),
      id: z.number(),
      type: z.string(),
      description: z.string(),
      enabled: z.boolean(),
      survey_form: z.any(),
      account_id: z.number(),
      created_at: z.string(),
      updated_at: z.string(),
    })
  ),
});

export const GET_TICKET_FORM_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("ticket_forms").optional(),
      id: z.number(),
      survey_form: z.any(),
      type: z.string(),
      description: z.string(),
    })
    .optional()
    .nullable(),
});

export const CREATE_TICKET_FORMMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("ticket_forms").optional(),
      description: z.string(),
      enabled: z.boolean(),
      id: z.number(),
      survey_form: z.any(),
      type: z.string(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_TICKET_FORM_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("ticket_forms").optional(),
      id: z.number(),
      updated_at: z.string(),
      survey_form: z.any(),
      type: z.string(),
    })
    .optional()
    .nullable(),
});

export const DELETE_TICKET_FORMMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("ticket_forms").optional(),
      id: z.number(),
      type: z.string(),
      description: z.string(),
    })
    .optional()
    .nullable(),
});

export const GET_TICKET_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("ticket").optional(),
      id: z.number(),
      form_value: z.any(),
      created_at: z.string(),
      contact_id: z.number(),
      assigned_agent: z.number().optional().nullable(),
      account_id: z.number(),
      type: z.string().optional().nullable(),
      priority: z.number(),
      resolution_time: z.string().optional().nullable(),
      conversation_id: z.number().optional().nullable(),
      status: z.number(),
      subject: z.string(),
      assigned_team: z.number().optional().nullable(),
      ticket_form_id: z.number(),
      updated_at: z.string(),
      description: z.string().optional().nullable(),
      created_by: z.number().optional().nullable(),
      source: z.string().optional().nullable(),
      team: z
        .object({
          __typename: z.literal("teams").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      agent: z
        .object({
          __typename: z.literal("users").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      contact: z.object({
        __typename: z.literal("contacts").optional(),
        id: z.number(),
        name: z.string().optional().nullable(),
        email: z.string().optional().nullable(),
        phone_number: z.string().optional().nullable(),
        preferred_language: z.string(),
        source: z.any().optional().nullable(),
        created_at: z.string(),
        updated_at: z.string(),
        social_profiles: z.any().optional().nullable(),
        profile_image: z.any().optional().nullable(),
        conversations: z.array(
          z.object({
            __typename: z.literal("conversations").optional(),
            id: z.number(),
            messages: z.array(
              z.object({
                __typename: z.literal("messages").optional(),
                id: z.number(),
                message: z.string().optional().nullable(),
              })
            ),
          })
        ),
      }),
      created_user: z
        .object({
          __typename: z.literal("users").optional(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      ticket_shares: z.array(
        z.object({
          __typename: z.literal("ticket_share").optional(),
          team: z.object({
            __typename: z.literal("teams").optional(),
            id: z.number(),
            name: z.string(),
          }),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const LINK_CONVERSATION_ID_TO_TICKETMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("ticket").optional(),
      conversation_id: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const CREATE_TICKETMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("ticket").optional(),
      id: z.number(),
      form_value: z.any(),
      created_at: z.string(),
      contact_id: z.number(),
      assigned_agent: z.number().optional().nullable(),
      account_id: z.number(),
      type: z.string().optional().nullable(),
      priority: z.number(),
      resolution_time: z.string().optional().nullable(),
      status: z.number(),
      subject: z.string(),
      assigned_team: z.number().optional().nullable(),
      ticket_form_id: z.number(),
      updated_at: z.string(),
      description: z.string().optional().nullable(),
      created_by: z.number().optional().nullable(),
      source: z.string().optional().nullable(),
      team: z
        .object({
          __typename: z.literal("teams").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      agent: z
        .object({
          __typename: z.literal("users").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      ticket_shares: z.array(
        z.object({
          __typename: z.literal("ticket_share").optional(),
          id: z.number(),
          team_id: z.number(),
          ticket_id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const UPDATE_TICKETMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  delete_ticket_share: z
    .object({
      __typename: z.literal("ticket_share_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("ticket_share").optional(),
          id: z.number(),
          team_id: z.number(),
          ticket_id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
  insert_ticket_share: z
    .object({
      __typename: z.literal("ticket_share_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("ticket_share").optional(),
          id: z.number(),
          team_id: z.number(),
          ticket_id: z.number(),
        })
      ),
    })
    .optional()
    .nullable(),
  updated_ticket: z
    .object({
      __typename: z.literal("ticket").optional(),
      id: z.number(),
      form_value: z.any(),
      created_at: z.string(),
      contact_id: z.number(),
      assigned_agent: z.number().optional().nullable(),
      account_id: z.number(),
      type: z.string().optional().nullable(),
      priority: z.number(),
      resolution_time: z.string().optional().nullable(),
      status: z.number(),
      subject: z.string(),
      assigned_team: z.number().optional().nullable(),
      ticket_form_id: z.number(),
      updated_at: z.string(),
      description: z.string().optional().nullable(),
      created_by: z.number().optional().nullable(),
      source: z.string().optional().nullable(),
      team: z
        .object({
          __typename: z.literal("teams").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      agent: z
        .object({
          __typename: z.literal("users").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
    })
    .optional()
    .nullable(),
});

export const DELETE_TICKETMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("ticket").optional(),
      id: z.number(),
      form_value: z.any(),
      created_at: z.string(),
      contact_id: z.number(),
      assigned_agent: z.number().optional().nullable(),
      account_id: z.number(),
      type: z.string().optional().nullable(),
      priority: z.number(),
      resolution_time: z.string().optional().nullable(),
      status: z.number(),
      subject: z.string(),
      assigned_team: z.number().optional().nullable(),
      ticket_form_id: z.number(),
      updated_at: z.string(),
      description: z.string().optional().nullable(),
      created_by: z.number().optional().nullable(),
      source: z.string().optional().nullable(),
      team: z
        .object({
          __typename: z.literal("teams").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      agent: z
        .object({
          __typename: z.literal("users").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
    })
    .optional()
    .nullable(),
});

export const GET_TICKET_BY_CONTACT_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("ticket").optional(),
      id: z.number(),
      description: z.string().optional().nullable(),
      subject: z.string(),
      source: z.string().optional().nullable(),
      status: z.number(),
      priority: z.number(),
      created_at: z.string(),
      updated_at: z.string(),
      type: z.string().optional().nullable(),
      form_value: z.any(),
      assigned_agent: z.number().optional().nullable(),
      agent: z
        .object({
          __typename: z.literal("users").optional(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      team: z
        .object({
          __typename: z.literal("teams").optional(),
          name: z.string(),
          id: z.number(),
        })
        .optional()
        .nullable(),
    })
  ),
});

export const GET_TICKET_MESSAGES_BY_TICKET_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("ticket_messages").optional(),
      id: z.number(),
      content_attributes: z.any().optional().nullable(),
      message_type: z.number().optional().nullable(),
      internal: z.boolean().optional().nullable(),
      sender_info: z.any().optional().nullable(),
      status: z.number(),
      source_id: z.string().optional().nullable(),
      created_at: z.string(),
      ticket_id: z.number().optional().nullable(),
      message: z.string().optional().nullable(),
      attachments: z.array(
        z.object({
          __typename: z.literal("attachments").optional(),
          id: z.number(),
          key: z.string().optional().nullable(),
          file_name: z.string().optional().nullable(),
          file_type: z.string().optional().nullable(),
          extension: z.string().optional().nullable(),
          url: z.string().optional().nullable(),
        })
      ),
    })
  ),
});

export const GET_TICKET_MESSAGES_SUBSCRIPTIONSubscription = z.object({
  __typename: z.literal("subscription_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("ticket_messages").optional(),
      id: z.number(),
    })
  ),
});

export const GET_SEARCHED_TICKETSQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("ticket").optional(),
      id: z.number(),
      form_value: z.any(),
      created_at: z.string(),
      contact_id: z.number(),
      assigned_agent: z.number().optional().nullable(),
      account_id: z.number(),
      type: z.string().optional().nullable(),
      priority: z.number(),
      resolution_time: z.string().optional().nullable(),
      status: z.number(),
      subject: z.string(),
      assigned_team: z.number().optional().nullable(),
      ticket_form_id: z.number(),
      updated_at: z.string(),
      description: z.string().optional().nullable(),
      created_by: z.number().optional().nullable(),
      source: z.string().optional().nullable(),
      team: z
        .object({
          __typename: z.literal("teams").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      agent: z
        .object({
          __typename: z.literal("users").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
    })
  ),
});

export const GET_FILTERED_TICKETSQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("ticket").optional(),
      id: z.number(),
      form_value: z.any(),
      created_at: z.string(),
      contact_id: z.number(),
      assigned_agent: z.number().optional().nullable(),
      account_id: z.number(),
      type: z.string().optional().nullable(),
      priority: z.number(),
      resolution_time: z.string().optional().nullable(),
      status: z.number(),
      subject: z.string(),
      assigned_team: z.number().optional().nullable(),
      ticket_form_id: z.number(),
      updated_at: z.string(),
      description: z.string().optional().nullable(),
      created_by: z.number().optional().nullable(),
      source: z.string().optional().nullable(),
      team: z
        .object({
          __typename: z.literal("teams").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
      agent: z
        .object({
          __typename: z.literal("users").optional(),
          id: z.number(),
          name: z.string(),
        })
        .optional()
        .nullable(),
    })
  ),
});

export const GET_TICKET_COUNT_SUBSCRIPTIONSubscription = z.object({
  __typename: z.literal("subscription_root").optional(),
  payload: z.object({
    __typename: z.literal("ticket_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("ticket_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
});

export const GET_TICKETS_SUBSCRIPTIONSubscription = z.object({
  __typename: z.literal("subscription_root").optional(),
  ticket: z.array(
    z.object({
      __typename: z.literal("ticket").optional(),
      id: z.number(),
    })
  ),
});

export const GET_TICKETS_COUNTSQuery = z.object({
  __typename: z.literal("query_root").optional(),
  mine: z.object({
    __typename: z.literal("ticket_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("ticket_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  team: z.object({
    __typename: z.literal("ticket_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("ticket_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  watching: z.object({
    __typename: z.literal("ticket_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("ticket_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  history: z.object({
    __typename: z.literal("ticket_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("ticket_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  unassigned: z.object({
    __typename: z.literal("ticket_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("ticket_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
});

export const CREATE_CONTACTMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("contacts").optional(),
      id: z.number(),
      name: z.string().optional().nullable(),
      email: z.string().optional().nullable(),
      phone_number: z.string().optional().nullable(),
      gender: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      preferred_language: z.string(),
      profile_twitter: z.any().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_PHONE_NUMBERMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("contacts").optional(),
      id: z.number(),
      phone_number: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const GET_TWITTER_CHANNEL_PROFILESQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("channel_twitter_profiles").optional(),
      id: z.number(),
      screen_name: z.string(),
    })
  ),
});

export const USER_PROFILE_INFOQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("users").optional(),
      availability: z.number().optional().nullable(),
      email: z.any().optional().nullable(),
      display_name: z.string().optional().nullable(),
      id: z.number(),
      hr_id: z.string(),
      name: z.string(),
      phone_number: z.string().optional().nullable(),
      updated_at: z.string(),
    })
    .optional()
    .nullable(),
});

export const GetAllPublishArticlesQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("knowledge_base_articles").optional(),
      id: z.number(),
      name: z.string(),
      body: z.string(),
      language: z.string(),
      article_status: z.string(),
      category: z.object({
        __typename: z.literal("knowledge_base_categories").optional(),
        name: z.string(),
        id: z.number(),
      }),
    })
  ),
  total: z.object({
    __typename: z.literal("knowledge_base_articles_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("knowledge_base_articles_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
});

export const GET_PUBLISHED_ARTICLES_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("knowledge_base_articles").optional(),
      id: z.number(),
      name: z.string(),
      updated_at: z.string(),
      body: z.string(),
      meta_tags: z.string().optional().nullable(),
      meta_description: z.string().optional().nullable(),
      language: z.string(),
      category: z.object({
        __typename: z.literal("knowledge_base_categories").optional(),
        id: z.number(),
        name: z.string(),
      }),
    })
    .optional()
    .nullable(),
});

export const GET_ALL_PUBLISHED_ARTICLES_BY_CATEGORIESQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("knowledge_base_articles").optional(),
      id: z.number(),
      name: z.string(),
      article_status: z.string(),
      body: z.string(),
      category: z.object({
        __typename: z.literal("knowledge_base_categories").optional(),
        id: z.number(),
        name: z.string(),
      }),
    })
  ),
});

export const UPDATE_USER_PROFILE_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("users").optional(),
      name: z.string(),
      display_name: z.string().optional().nullable(),
      email: z.any().optional().nullable(),
      phone_number: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const CREATE_KNOWLEDGE_BASE_CATEGORYMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("knowledge_base_categories").optional(),
      id: z.number(),
      name: z.string(),
      language: z.string(),
      description: z.string(),
      updated_at: z.string(),
      is_enabled: z.boolean(),
    })
    .optional()
    .nullable(),
});

export const GET_ALL_KNOWLEDGE_BASE_CATEGORIESQuery = z.object({
  __typename: z.literal("query_root").optional(),
  total: z.object({
    __typename: z.literal("knowledge_base_categories_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("knowledge_base_categories_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  payload: z.array(
    z.object({
      __typename: z.literal("knowledge_base_categories").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string(),
      language: z.string(),
      is_enabled: z.boolean(),
      updated_at: z.string(),
      created_at: z.string(),
      created_by: z
        .object({
          __typename: z.literal("account_agents").optional(),
          name: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
    })
  ),
});

export const GET_CATEGORIES_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("knowledge_base_categories").optional(),
      id: z.number(),
      name: z.string(),
      language: z.string(),
      description: z.string(),
    })
    .optional()
    .nullable(),
});

export const UPDATE_KNOWLEDGE_BASE_CATEGORIES_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("knowledge_base_categories").optional(),
      id: z.number(),
      name: z.string(),
    })
    .optional()
    .nullable(),
});

export const DELETE_KNOWLEDGE_BASE_CATEGORY_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("knowledge_base_categories").optional(),
      id: z.number(),
    })
    .optional()
    .nullable(),
});

export const GET_ALL_KNOWLEDGE_BASE_ARTICLESQuery = z.object({
  __typename: z.literal("query_root").optional(),
  total: z.object({
    __typename: z.literal("knowledge_base_articles_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("knowledge_base_articles_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  payload: z.array(
    z.object({
      __typename: z.literal("knowledge_base_articles").optional(),
      id: z.number(),
      name: z.string(),
      body: z.string(),
      article_status: z.string(),
      permissions: z.string(),
      read_count: z.number(),
      is_enabled: z.boolean(),
      language: z.string(),
      meta_tags: z.string().optional().nullable(),
      meta_description: z.string().optional().nullable(),
      conversation_trigger: z.string().optional().nullable(),
      category_id: z.number(),
      created_at: z.string(),
      updated_at: z.string(),
      created_by: z.object({
        __typename: z.literal("users").optional(),
        name: z.string(),
      }),
      category: z.object({
        __typename: z.literal("knowledge_base_categories").optional(),
        name: z.string(),
      }),
    })
  ),
});

export const CREATE_KNOWLEDGE_BASE_ARTICLEMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("knowledge_base_articles").optional(),
      id: z.number(),
      name: z.string(),
      body: z.string(),
      read_count: z.number(),
      permissions: z.string(),
      language: z.string(),
      is_enabled: z.boolean(),
      created_at: z.string(),
      updated_at: z.string(),
      article_status: z.string(),
      conversation_trigger: z.string().optional().nullable(),
      meta_description: z.string().optional().nullable(),
      meta_tags: z.string().optional().nullable(),
      created_by: z.object({
        __typename: z.literal("users").optional(),
        name: z.string(),
      }),
    })
    .optional()
    .nullable(),
});

export const GET_SPECIFIC_ARTICLE_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("knowledge_base_articles").optional(),
      id: z.number(),
      name: z.string(),
      body: z.string(),
      article_status: z.string(),
      permissions: z.string(),
      read_count: z.number(),
      is_enabled: z.boolean(),
      language: z.string(),
      meta_tags: z.string().optional().nullable(),
      meta_description: z.string().optional().nullable(),
      conversation_trigger: z.string().optional().nullable(),
      category_id: z.number(),
      created_at: z.string(),
      updated_at: z.string(),
      created_by: z.object({
        __typename: z.literal("users").optional(),
        name: z.string(),
      }),
    })
    .optional()
    .nullable(),
});

export const UPDATE_ARTICLE_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("knowledge_base_articles").optional(),
      id: z.number(),
      name: z.string(),
      read_count: z.number(),
    })
    .optional()
    .nullable(),
});

export const DELETE_ARTICLE_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("knowledge_base_articles").optional(),
      id: z.number(),
    })
    .optional()
    .nullable(),
});

export const CREATE_TAGMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("tags").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      level: z.any(),
    })
    .optional()
    .nullable(),
});

export const GET_ALL_TAGSQuery = z.object({
  __typename: z.literal("query_root").optional(),
  total: z.object({
    __typename: z.literal("tags_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("tags_aggregate_fields").optional(),
        count: z.number(),
      })
      .optional()
      .nullable(),
  }),
  payload: z.array(
    z.object({
      __typename: z.literal("tags").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      is_enabled: z.boolean(),
      level: z.any(),
      created_at: z.string(),
      updated_at: z.string(),
      smart_tags: z.any().optional().nullable(),
      account_id: z.number(),
      created_by: z
        .object({
          __typename: z.literal("account_agents").optional(),
          id: z.number().optional().nullable(),
          name: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
    })
  ),
});

export const GET_A_TAG_BY_IDQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z
    .object({
      __typename: z.literal("tags").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      level: z.any(),
      smart_tags: z.any().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const UPDATED_TAGSMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("tags").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      is_enabled: z.boolean(),
    })
    .optional()
    .nullable(),
});

export const DELETE_TAG_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("tags").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      level: z.any(),
      is_enabled: z.boolean(),
      created_at: z.string(),
      updated_at: z.string(),
    })
    .optional()
    .nullable(),
});

export const UPDATED_CONTACT_REASON_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("workflows_contact_reason").optional(),
      id: z.number(),
      updated_at: z.string(),
      contact_reason: z.string(),
      categories: z.any(),
    })
    .optional()
    .nullable(),
});

export const GET_ALL_CONTACT_REASONSQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("workflows_contact_reason").optional(),
      categories: z.any(),
      contact_reason: z.string(),
      created_at: z.string(),
      id: z.number(),
      updated_at: z.string(),
    })
  ),
});

export const UPDATE_LAST_ACTIVE_ATMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("account_users_mutation_response").optional(),
      returning: z.array(
        z.object({
          __typename: z.literal("account_users").optional(),
          user_id: z.number(),
          last_active_at: z.string().optional().nullable(),
        })
      ),
    })
    .optional()
    .nullable(),
});

export const ADD_AGENTMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("account_users").optional(),
      id: z.number(),
      user_id: z.number(),
    })
    .optional()
    .nullable(),
});

export const GET_CONVERSATION_CSATQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("conversations").optional(),
      id: z.number(),
      contact_id: z.number().optional().nullable(),
      csat_sent: z.boolean(),
      csat_sent_at: z.string().optional().nullable(),
      csat_language: z.string(),
      csat_feedback: z
        .object({
          __typename: z.literal("csat_feedback").optional(),
          satisfaction_point: z.number(),
          open_question_ans: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
    })
  ),
});

export const GET_TICKET_CSATQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("ticket").optional(),
      id: z.number(),
      contact_id: z.number(),
      csat_sent: z.boolean(),
      csat_sent_at: z.string().optional().nullable(),
      csat_language: z.string(),
      csat_feedback: z
        .object({
          __typename: z.literal("csat_feedback").optional(),
          satisfaction_point: z.number(),
          open_question_ans: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
    })
  ),
});

export const ADD_CSAT_FEEDBACKMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("csat_feedback").optional(),
      contact_id: z.number(),
      conversation_id: z.number().optional().nullable(),
      ticket_id: z.number().optional().nullable(),
      satisfaction_point: z.number(),
      open_question_ans: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const GET_CSAT_SCOREQuery = z.object({
  __typename: z.literal("query_root").optional(),
  feedback: z.array(
    z.object({
      __typename: z.literal("csat_feedback").optional(),
      satisfaction_point: z.number(),
      open_question_ans: z.string().optional().nullable(),
      conversation_id: z.number().optional().nullable(),
      ticket_id: z.number().optional().nullable(),
    })
  ),
  aggregations: z.object({
    __typename: z.literal("csat_feedback_aggregate").optional(),
    aggregate: z
      .object({
        __typename: z.literal("csat_feedback_aggregate_fields").optional(),
        count: z.number(),
        sum: z
          .object({
            __typename: z.literal("csat_feedback_sum_fields").optional(),
            satisfaction_point: z.number().optional().nullable(),
          })
          .optional()
          .nullable(),
      })
      .optional()
      .nullable(),
  }),
});

export const GET_INSTAGRAM_PAGESQuery = z.object({
  __typename: z.literal("query_root").optional(),
  payload: z.array(
    z.object({
      __typename: z.literal("channel_instagram").optional(),
      page_id: z.string(),
    })
  ),
});

export const UPDATE_INSTAGRAM_INBOX_BY_IDMutation = z.object({
  __typename: z.literal("mutation_root").optional(),
  payload: z
    .object({
      __typename: z.literal("inboxes").optional(),
      id: z.number(),
      name: z.string(),
      description: z.string().optional().nullable(),
      is_enabled: z.boolean(),
    })
    .optional()
    .nullable(),
});
